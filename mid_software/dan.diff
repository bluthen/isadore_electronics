diff -r 05ab736c75d3 python/DMMCCmd.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/python/DMMCCmd.py	Fri Aug 11 16:29:11 2017 -0500
@@ -0,0 +1,60 @@
+#import spidev -- We import below so spidev is only a requirement if using dryer master
+from conversion import evalConversion
+
+def processDMMCCommands(JSON):
+	cmds = []
+	# This uses SPI ADC Mikro Click on Pi, Port is spi device slot, address is adc channel
+	dm_mc_json = filter(lambda x: x["type"]=="dm_mc",JSON)
+	if dm_mc_json:
+		for json_grp in dm_mc_json:
+			cmd = DMMCCmd(
+				sensorID = json_grp['sensor_id'],
+				slot=json_grp['port'],
+				channel=json_grp['addy'],
+				convertPy=json_grp['convert'],
+			    bias=json_grp['bias'])
+			cmd.execute()
+			cmds.append(cmd)
+	return cmds
+
+
+class DMMCCmd:
+	def __init__(self, sensorID=-1, slot=0, channel=1, convertPy="x", bias=0.0):
+		self.sensorID = sensorID
+		self.slot = slot
+		self.channel = channel-1
+		self.convertPy = convertPy
+		self.bias = bias
+		self.value=-1
+		self.raw_data = -1
+		self.error = False
+
+	def _readADC(self):
+		import spidev
+		spi = spidev.SpiDev(0, self.slot)
+		values = []
+		for i in range(0, 18):
+			buffer = spi.xfer2([0x06, self.channel<<6, 0])
+			value = ((buffer[1] & 0x0F) << 8) + buffer[2]
+			print value
+			values.append(value)
+		values.remove(max(values))
+		values.remove(min(values))
+
+		value = float(sum(values))/len(values)
+		spi.close()
+		return value
+
+	def execute(self):
+		self.raw_data = self._readADC()
+		self.value = evalConversion(self.convertPy, self.raw_data) + float(self.bias)
+
+	def to_JSON_WWW_data(self, readingTime):
+		if self.error:
+			return []
+		else:
+			return [{"sensor_id": self.sensorID,
+					 "type": 'dm_mc',
+					 "value": self.value,
+					 "raw_data": self.raw_data,
+					 "datetime": readingTime.isoformat()}]
diff -r 05ab736c75d3 python/MID.py
--- a/python/MID.py	Tue Mar 21 14:18:34 2017 -0500
+++ b/python/MID.py	Fri Aug 11 16:29:11 2017 -0500
@@ -32,6 +32,7 @@
 import sys
 import datetime
 import traceback
+import DMMCCmd
 
 CONFIG_LOC = '../MID.cfg'
 LAST_WWW_CONFIG_LOC = 'MID_WWW'
@@ -175,6 +176,16 @@
 					except Exception as e:
 						logging.error("Error occured while reading the AB VFD parameters:"+str(e))
 
+
+					try:
+						dmcmds = DMMCCmd.processDMMCCommands(WWWcfg["commandInfo"])
+						allCmds += dmcmds
+						logging.info('Read from DryerMaster: '+str(len(dmcmds)))
+					except Exception as e:
+						logging.error("Error occured while trying to read the Dryer Master's MC: ")
+						logging.exception(e)
+
+
 					lastReadingDateTime = time.time()
 					# 
 					# send data to WWW
